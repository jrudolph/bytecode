Bottom: 731fb9405937f3d0d4e6174a68705dff640a3c6c
Top:    8aa2fa117dfbef83b28bf057cacea293bdf75608
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2009-10-04 17:08:18 +0200

add another test for getting Method by scala.reflect.Code and reflection


---

diff --git a/bytecode/src/test/scala/net/virtualvoid/bytecode/ReflectSpecs.scala b/bytecode/src/test/scala/net/virtualvoid/bytecode/ReflectSpecs.scala
index fc432d2..8cd43b7 100644
--- a/bytecode/src/test/scala/net/virtualvoid/bytecode/ReflectSpecs.scala
+++ b/bytecode/src/test/scala/net/virtualvoid/bytecode/ReflectSpecs.scala
@@ -3,26 +3,34 @@ package net.virtualvoid.bytecode
 import _root_.org.specs._
 
 object ReflectSpecs extends Specification {
-	def treeOf(code:scala.reflect.Code[_]) = code.tree
+	import scala.reflect.Code.lift
  
 	import CodeTools._
  
 	"Fields should be correctly infered from scala.reflect.Code" in {
 		"Qualified read-accesses" in {
-			val field = fieldFromTree(treeOf(() => StaticVariableContainer.x))
+			val field = fieldFromTree(lift(() => StaticVariableContainer.x).tree)
 			field.getName must be_==("x")
 			field.getDeclaringClass.getSimpleName must be_==("StaticVariableContainer")
 		}
 		"imported read-accesses" in {
 			import StaticVariableContainer.x
-			val field = fieldFromTree(treeOf(() => x))
+			val field = fieldFromTree(lift(() => x).tree)
 			field.getName must be_==("x")
 			field.getDeclaringClass.getSimpleName must be_==("StaticVariableContainer")
 		}
 		"Write-accesses" in {
-			val field = fieldFromTree(treeOf(StaticVariableContainer.x = (_:Int)))
+			val field = fieldFromTree(lift(StaticVariableContainer.x = (_:Int)).tree)
 			field.getName must be_==("x")
 			field.getDeclaringClass.getSimpleName must be_==("StaticVariableContainer")
 		}
 	}
-}
\ No newline at end of file
+	"Methods should be correctly infered from scala.reflect.Code tree" in {
+	  "static methods of relatively qualified classes" in {
+	    val m = methodFromTree(lift(java.lang.Double.valueOf(_:Double)).tree)
+	    m.getName must be_==("valueOf")
+	    m.getParameterTypes.length must be_==(1)
+	  }
+	}
+}
+class ReflectSpecsTest extends runner.JUnit4(ReflectSpecs)
\ No newline at end of file
