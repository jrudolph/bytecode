Bottom: 744b733c6f9c10891764a48741b8aeffd93d2263
Top:    098c919dd45c3405cee63c12723910274bca0839
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2009-10-06 13:07:29 +0200

update Local changes


---

diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
index 493840b..c50e331 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
@@ -311,7 +311,7 @@ object ASMCompiler extends ByteletCompiler{
         Type.getType(CodeTools.cleanClass(cl.getName)).getOpcode(opcode)
     def local[T](index:Int,clazz:Class[_]):Local[T] = 
         new Local[T]{
-          def load[ST<:List]:F[ST] => F[ST**T] = f => {
+          def load[ST<:List,T2>:T]:F[ST] => F[ST**T2] = f => {
             val asmF:ASMFrame[ST] = f.asInstanceOf[ASMFrame[ST]]
             asmF.mv.visitVarInsn(opcode(clazz,ILOAD),index)
             asmF.withStack(asmF.stackClass ** clazz)
diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
index a81d891..e5e0caa 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
@@ -143,7 +143,7 @@ object Interpreter extends ByteletCompiler {
 
     def local[T](initial:T):Local[T] = new Local[T] {
       var value = initial
-      def load[ST<:List]:F[ST] => F[ST**T] = f => IF(f.stack**value)
+      def load[ST<:List,T2>:T]:F[ST] => F[ST**T2] = f => IF(f.stack**value)
       def store[ST<:List]:F[ST**T] => F[ST] = f => {
     	  value = f.stack.top
     	  IF(f.stack.rest)
