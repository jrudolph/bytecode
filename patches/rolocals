Bottom: e41194af49093b601f4af5807f5a73e33fad503f
Top:    4d28bae2ea61f26635cb90b161161e3f6625af27
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2009-10-06 13:08:20 +0200

split Local interface in two: ROLocal[+T] with load and Local[T] extends ROLocal[T] with store

---

diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Bytecode.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Bytecode.scala
index f47e236..b5d3084 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Bytecode.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Bytecode.scala
@@ -106,8 +106,10 @@ object Bytecode{
     											  ,thenB:F[R]=>Nothing):F[R]
   }
   
-  trait Local[T]{
-    def load[ST<:List]:F[ST] => F[ST**T]
+  trait ROLocal[+T]{
+    def load[R<:List,T2>:T]:F[R] => F[R**T2]
+  }  
+  trait Local[T] extends ROLocal[T]{
     def store[ST<:List]:F[ST**T] => F[ST]
   }
 
diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
index 26f0ab8..7fa8156 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
@@ -280,7 +280,7 @@ object ASMCompiler extends ByteletCompiler{
         Type.getType(CodeTools.cleanClass(cl.getName)).getOpcode(opcode)
     def local[T](index:Int,clazz:Class[_]):Local[T] = 
         new Local[T]{
-          def load[ST<:List]:F[ST] => F[ST**T] = f => {
+          def load[ST<:List,T2>:T]:F[ST] => F[ST**T2] = f => {
             val asmF:ASMFrame[ST] = f.asInstanceOf[ASMFrame[ST]]
             asmF.mv.visitVarInsn(opcode(clazz,ILOAD),index)
             asmF.withStack(asmF.stackClass ** clazz)
diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
index 5469876..ff88f60 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
@@ -124,7 +124,7 @@ object Interpreter extends ByteletCompiler {
 
     def local[T](initial:T):Local[T] = new Local[T] {
       var value = initial
-      def load[ST<:List]:F[ST] => F[ST**T] = f => IF(f.stack**value)
+      def load[ST<:List,T2>:T]:F[ST] => F[ST**T2] = f => IF(f.stack**value)
       def store[ST<:List]:F[ST**T] => F[ST] = f => {
     	  value = f.stack.top
     	  IF(f.stack.rest)
