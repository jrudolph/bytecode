Bottom: bb3b92b10fe726543c1f3a676ab82a011509e249
Top:    806cfa076c0cf3243c63a3e8aa5887a9163bf44c
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2010-11-29 10:59:06 +0100

implemented two-arg constructors


---

diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Instantiation.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Instantiation.scala
index 677ae94..dbe4d0d 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Instantiation.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Instantiation.scala
@@ -12,7 +12,7 @@ case class Ctor1[T, U](override val constructor: jConstructor[_]) extends Constr
   override val numParams = 1
 
   import Bytecode.Instructions._
-  def apply[R <: List](/*arg1: F[Nil] => F[Nil**T]*/): F[R**T] => F[R**U] =
+  def apply[R <: List](): F[R**T] => F[R**U] =
     withLocal { arg1 => f =>
       (f.new_int(constructor.getDeclaringClass) ~
         dup ~
@@ -20,7 +20,20 @@ case class Ctor1[T, U](override val constructor: jConstructor[_]) extends Constr
         .invokeconstructor(this)
     }
 }
+case class Ctor2[T1, T2, U](override val constructor: jConstructor[_]) extends Constructor {
+  override val numParams = 2
+
+  import Bytecode.Instructions._
+  def apply[R <: List](): F[R**T1**T2] => F[R**U] =
+    withLocal { arg2 => _ ~ withLocal { arg1 => f =>
+      (f.new_int(constructor.getDeclaringClass) ~
+        dup ~
+        arg1.load ~ arg2.load)
+        .invokeconstructor(this)
+    }}
+}
 
 trait InstantiationInstructions {
   def ctor1[T, U](c: Code[T => U]): Ctor1[T, U] = Ctor1[T, U](CodeTools.constructorFromTree(c.tree))
+  def ctor2[T1, T2, U](c: Code[(T1, T2) => U]): Ctor2[T1, T2, U] = Ctor2[T1, T2, U](CodeTools.constructorFromTree(c.tree))
 }
diff --git a/bytecode/src/test/scala/net/virtualvoid/bytecode/BytecodeCompilerSpecs.scala b/bytecode/src/test/scala/net/virtualvoid/bytecode/BytecodeCompilerSpecs.scala
index 0c022e5..2077fea 100644
--- a/bytecode/src/test/scala/net/virtualvoid/bytecode/BytecodeCompilerSpecs.scala
+++ b/bytecode/src/test/scala/net/virtualvoid/bytecode/BytecodeCompilerSpecs.scala
@@ -115,6 +115,21 @@ object BytecodeCompilerSpecs extends Specification{
       compiler.compile(classOf[java.lang.String])(str => _~str.load~ctor()~toString)
       .apply("test") must be_==("test") 
     }
+    "call binary constructor" in {
+      import java.nio.charset.Charset
+      val testCharset = "UTF-8"
+      val stringCtor = ctor2(new java.lang.String(_: Array[Byte], _: Charset))
+      val charsetForName = method1(Charset.forName(_: String))
+
+      compiler.compile(classOf[Array[Byte]])(bytes => 
+        _ ~ 
+        bytes.load ~
+        ldc(testCharset) ~
+        charsetForName ~
+        stringCtor() ~
+        toString)
+      .apply("test".getBytes(testCharset)) must be_==("test") 
+    }
     "store(_) string after void method" in {
       compiler.compile(classOf[java.lang.String])(str => 
         _ ~
