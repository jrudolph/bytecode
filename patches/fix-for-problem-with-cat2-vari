Bottom: 2d2b1537c819562980d1482005fdc2e915a70038
Top:    e2c70bb788876835b3facfde926d6a1a1035523c
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2009-10-04 16:51:12 +0200

fix for problem with Cat2 variables: withLocal didn't allocate enough space
in the local variable array


---

diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
index dfd5d91..04076f1 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Compiler.scala
@@ -255,6 +255,15 @@ object ASMCompiler extends ByteletCompiler{
             invalidFrame
           }(this)
       }
+      def size(cl:Class[_]) = {
+        val Double = classOf[Double]
+        val Long = classOf[Long]
+        cl match {
+          case Double => 2
+          case Long => 2
+          case _ => 1
+        }
+      }
       def withLocal_int[T,ST<:List,ST2<:List](top:T
                                              ,rest:ST
                                              ,code:Local[T]=>F[ST]=>F[ST2]):F[ST2] = {
@@ -263,7 +272,7 @@ object ASMCompiler extends ByteletCompiler{
         
         mv.visitVarInsn(opcode(localClazz,ISTORE),localIndex)
         
-        val afterBlock = code(local(localIndex,localClazz))(new ASMFrame[ST](mv,stackClass.rest,nextFreeLocal+1)).asInstanceOf[ASMFrame[ST2]]
+        val afterBlock = code(local(localIndex,localClazz))(new ASMFrame[ST](mv,stackClass.rest,nextFreeLocal + size(stackClass.top))).asInstanceOf[ASMFrame[ST2]]
         
         new ASMFrame[ST2](mv,afterBlock.stackClass,nextFreeLocal)
       }
