Bottom: f15b0220168dcf9c69206b25302ba5043f355858
Top:    98696897cbd7455e716bae94c697c853ca563ceb
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2009-10-05 12:25:56 +0200

Refresh of typed

---

diff --git a/objectformatter/src/main/scala/net/virtualvoid/string/FormatCompiler.scala b/objectformatter/src/main/scala/net/virtualvoid/string/FormatCompiler.scala
index b391e92..6437f5e 100644
--- a/objectformatter/src/main/scala/net/virtualvoid/string/FormatCompiler.scala
+++ b/objectformatter/src/main/scala/net/virtualvoid/string/FormatCompiler.scala
@@ -20,15 +20,13 @@ object Compiler{
     }
   }
 
-  def compileGetExp[R<:List,LR<:List,T,Ret](exp:Exp[T,Ret])
-                                            //,cl:Class[T]
-                                            //,retType:Class[Ret])
-                                           (f:F[R**T]):F[R**Ret] =
+  def compileGetExp[R<:List,T,Ret](exp:Exp[T,Ret])
+                                  (f:F[R**T]):F[R**Ret] =
     exp match {
       case p@ParentExp(inner,parent) => f ~ compileGetExp(parent) ~ compileGetExp(inner)
       case MethodHandleExp(handle) => f ~ handle.invoke
-      case ThisExp(retCl) => f ~ checkcast(retCl)
-    }                                             
+      case ThisExp => f
+    }
   /*exp match {
     case p@ParentExp(inner,parent) =>{
       val m = Bytecode.methodHandle[T,Object](p.method(cl),cl,classOf[Object])
diff --git a/objectformatter/src/main/scala/net/virtualvoid/string/TypedAST.scala b/objectformatter/src/main/scala/net/virtualvoid/string/TypedAST.scala
index 7f3f0a4..8aa54ae 100644
--- a/objectformatter/src/main/scala/net/virtualvoid/string/TypedAST.scala
+++ b/objectformatter/src/main/scala/net/virtualvoid/string/TypedAST.scala
@@ -7,8 +7,8 @@ object TypedAST {
 	def eval(o:T):U
 	override def apply(o:T):U = eval(o) 
   }
-  case class ThisExp[T,U](retClass:Class[U]) extends Exp[T,U]{
-    override def eval(o:T) = o.asInstanceOf[U]
+  case object ThisExp extends Exp[Any,Any]{
+    override def eval(o:Any) = o
   }
   case class ParentExp[T,U,V](inner:Exp[U,V],parent:Exp[T,U]) extends Exp[T,V]{
     override def eval(o:T) = inner.eval(parent.eval(o))
@@ -70,7 +70,7 @@ object TypedAST {
    */
   def typedThisExp[T,U](cl:Class[T],retCl:Class[U]):Exp[T,U] =
     if (retCl.isAssignableFrom(cl))
-      ThisExp(retCl)
+      ThisExp.asInstanceOf[Exp[T,U]] // we checked it
     else
       throw new TypingException("#this has not the expected type "+retCl)
