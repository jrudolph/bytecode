Bottom: ce291fa2601636333ed43274a71255742d0ff043
Top:    13f961e9593a9e782e81af28899281bf04f851b5
Author: Johannes Rudolph <johannes_rudolph@gmx.de>
Date:   2009-09-29 16:46:23 +0200

Refresh of binary

---

diff --git a/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala b/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
index 9baca87..f8555f0 100644
--- a/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
+++ b/bytecode/src/main/scala/net/virtualvoid/bytecode/Interpreter.scala
@@ -4,7 +4,7 @@ import Bytecode._
 
 import java.lang.{String=>jString}
 
-object Interpreter extends ByteletCompiler{
+object Interpreter extends ByteletCompiler {
     case class IF[+ST<:List](stack:ST) extends F[ST]{
       import CodeTools._
       
@@ -108,28 +108,26 @@ object Interpreter extends ByteletCompiler{
           // classical y combinator in strict languages
           func(tailRecursive_int(func)_)(fr)
       
-      def withLocal_int[T,ST<:List,ST2<:List](top:T,rest:ST,code:Local[T]=>F[ST]=>F[ST2]):F[ST2] = {
-        var value = top
-        code(new Local[T]{
-          def load[ST<:List]:F[ST] => F[ST**T] = f => IF(f.stack**value)
-          def store[ST<:List]:F[ST**T] => F[ST] = f => {
-            value = f.stack.top
-            IF(f.stack.rest)
-          }
-        })(IF(rest))
-      }
+      def withLocal_int[T,ST<:List,ST2<:List](top:T,rest:ST,code:Local[T]=>F[ST]=>F[ST2]):F[ST2] =
+        code(local(top))(IF(rest))
     }
 
+    def local[T](initial:T):Local[T] = new Local[T] {
+      var value = initial
+      def load[ST<:List]:F[ST] => F[ST**T] = f => IF(f.stack**value)
+      def store[ST<:List]:F[ST**T] => F[ST] = f => {
+    	  value = f.stack.top
+    	  IF(f.stack.rest)
+      }
+    } 
+    
     def compile[T<:AnyRef,U<:AnyRef](cl:Class[T])(
                        code: Local[T] => F[Nil] => F[Nil**U]   
 	  ): T => U =
-      t => code(new Local[T]{
-        var value = t
-        def load[ST<:List]:F[ST] => F[ST**T] = f => IF(f.stack**value)
-        def store[ST<:List]:F[ST**T] => F[ST] = f => {value = f.stack.top; IF(f.stack.rest)}
-      })(IF(N)).stack.top
+      t => code(local(t))(IF(N)).stack.top
     
     def compile[T1<:AnyRef,T2<:AnyRef,U<:AnyRef](cl1:Class[T1],cl2:Class[T2])(
 	    code: (Local[T1],Local[T2]) => F[Nil] => F[Nil**U]
-	  ): (T1,T2) => U = null
-  }
\ No newline at end of file
+	  ): (T1,T2) => U = 
+      (t1,t2) => code(local(t1),local(t2))(IF(N)).stack.top
+}
\ No newline at end of file
